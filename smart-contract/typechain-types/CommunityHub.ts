/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace CommunityHub {
  export type ProposalStruct = {
    id: PromiseOrValue<BigNumberish>;
    creator: PromiseOrValue<string>;
    beneficiary: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    votesYes: PromiseOrValue<BigNumberish>;
    votesNo: PromiseOrValue<BigNumberish>;
    donated: PromiseOrValue<BigNumberish>;
    createdAt: PromiseOrValue<BigNumberish>;
    open: PromiseOrValue<boolean>;
  };

  export type ProposalStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    id: BigNumber;
    creator: string;
    beneficiary: string;
    description: string;
    votesYes: BigNumber;
    votesNo: BigNumber;
    donated: BigNumber;
    createdAt: BigNumber;
    open: boolean;
  };
}

export interface CommunityHubInterface extends utils.Interface {
  functions: {
    "close(uint256)": FunctionFragment;
    "createProposal(string,address)": FunctionFragment;
    "donate(uint256)": FunctionFragment;
    "getProposal(uint256)": FunctionFragment;
    "hasVoted(uint256,address)": FunctionFragment;
    "listProposals(uint256,uint256)": FunctionFragment;
    "nextId()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "vote(uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "close"
      | "createProposal"
      | "donate"
      | "getProposal"
      | "hasVoted"
      | "listProposals"
      | "nextId"
      | "proposals"
      | "vote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "close",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listProposals",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "nextId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "Closed(uint256)": EventFragment;
    "Donated(uint256,address,uint256)": EventFragment;
    "ProposalCreated(uint256,address,address,string)": EventFragment;
    "Voted(uint256,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Closed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Donated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
}

export interface ClosedEventObject {
  id: BigNumber;
}
export type ClosedEvent = TypedEvent<[BigNumber], ClosedEventObject>;

export type ClosedEventFilter = TypedEventFilter<ClosedEvent>;

export interface DonatedEventObject {
  id: BigNumber;
  from: string;
  amount: BigNumber;
}
export type DonatedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  DonatedEventObject
>;

export type DonatedEventFilter = TypedEventFilter<DonatedEvent>;

export interface ProposalCreatedEventObject {
  id: BigNumber;
  creator: string;
  beneficiary: string;
  description: string;
}
export type ProposalCreatedEvent = TypedEvent<
  [BigNumber, string, string, string],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface VotedEventObject {
  id: BigNumber;
  voter: string;
  support: boolean;
}
export type VotedEvent = TypedEvent<
  [BigNumber, string, boolean],
  VotedEventObject
>;

export type VotedEventFilter = TypedEventFilter<VotedEvent>;

export interface CommunityHub extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CommunityHubInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    close(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createProposal(
      description: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    donate(
      id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getProposal(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ]
    >;

    hasVoted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listProposals(
      fromId: PromiseOrValue<BigNumberish>,
      toId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[CommunityHub.ProposalStructOutput[]]>;

    nextId(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        id: BigNumber;
        creator: string;
        beneficiary: string;
        description: string;
        votesYes: BigNumber;
        votesNo: BigNumber;
        donated: BigNumber;
        createdAt: BigNumber;
        open: boolean;
      }
    >;

    vote(
      id: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  close(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createProposal(
    description: PromiseOrValue<string>,
    beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  donate(
    id: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getProposal(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ]
  >;

  hasVoted(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listProposals(
    fromId: PromiseOrValue<BigNumberish>,
    toId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<CommunityHub.ProposalStructOutput[]>;

  nextId(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      id: BigNumber;
      creator: string;
      beneficiary: string;
      description: string;
      votesYes: BigNumber;
      votesNo: BigNumber;
      donated: BigNumber;
      createdAt: BigNumber;
      open: boolean;
    }
  >;

  vote(
    id: PromiseOrValue<BigNumberish>,
    support: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    close(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createProposal(
      description: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    donate(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getProposal(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ]
    >;

    hasVoted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listProposals(
      fromId: PromiseOrValue<BigNumberish>,
      toId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<CommunityHub.ProposalStructOutput[]>;

    nextId(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        id: BigNumber;
        creator: string;
        beneficiary: string;
        description: string;
        votesYes: BigNumber;
        votesNo: BigNumber;
        donated: BigNumber;
        createdAt: BigNumber;
        open: boolean;
      }
    >;

    vote(
      id: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Closed(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): ClosedEventFilter;
    Closed(id?: PromiseOrValue<BigNumberish> | null): ClosedEventFilter;

    "Donated(uint256,address,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): DonatedEventFilter;
    Donated(
      id?: PromiseOrValue<BigNumberish> | null,
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): DonatedEventFilter;

    "ProposalCreated(uint256,address,address,string)"(
      id?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      description?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      id?: PromiseOrValue<BigNumberish> | null,
      creator?: PromiseOrValue<string> | null,
      beneficiary?: PromiseOrValue<string> | null,
      description?: null
    ): ProposalCreatedEventFilter;

    "Voted(uint256,address,bool)"(
      id?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      support?: null
    ): VotedEventFilter;
    Voted(
      id?: PromiseOrValue<BigNumberish> | null,
      voter?: PromiseOrValue<string> | null,
      support?: null
    ): VotedEventFilter;
  };

  estimateGas: {
    close(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createProposal(
      description: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    donate(
      id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getProposal(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasVoted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listProposals(
      fromId: PromiseOrValue<BigNumberish>,
      toId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextId(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      id: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    close(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createProposal(
      description: PromiseOrValue<string>,
      beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    donate(
      id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getProposal(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasVoted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listProposals(
      fromId: PromiseOrValue<BigNumberish>,
      toId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      id: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
